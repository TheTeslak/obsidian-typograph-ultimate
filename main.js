/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => TypographPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var TypographPlugin = class extends import_obsidian.Plugin {
  async onload() {
    this.addCommand({
      id: "apply-typography",
      name: "Apply Typography to Current File",
      editorCallback: (editor) => this.applyTypography(editor)
    });
    this.addRibbonIcon("pencil", "Apply Typography", () => {
      const activeView = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
      if (activeView) {
        this.applyTypography(activeView.editor);
      }
    });
    console.log("Typograph plugin loaded");
  }
  applyTypography(editor) {
    const text = editor.getValue();
    const lines = text.split("\n");
    let changesCount = 0;
    let formattedText = lines.map((line) => {
      const lang = this.detectLanguage(line);
      if (lang === "en") {
        const result = this.typographyEnglish(line);
        changesCount += result.changesCount;
        return result.text;
      } else if (lang === "ru") {
        const result = this.typographyRussian(line);
        changesCount += result.changesCount;
        return result.text;
      }
      return line;
    }).join("\n");
    if (changesCount > 0) {
      editor.setValue(formattedText);
      new import_obsidian.Notice(`${changesCount} changes applied.`);
    } else {
      new import_obsidian.Notice("No changes were necessary.");
    }
  }
  // Detect the language of the text based on the presence of Cyrillic characters
  detectLanguage(text) {
    const cyrillic = /[а-яА-ЯЁё]/;
    return cyrillic.test(text) ? "ru" : "en";
  }
  // Function for typography rules specific to English
  typographyEnglish(text) {
    let changesCount = 0;
    const prepositionsEnglish = /\b(and|the|a|an|to|at|in|on|by|of|for|from|as|with|but)\s+/gi;
    text = text.replace(prepositionsEnglish, (match, p1) => {
      changesCount++;
      return `${p1}\xA0`;
    });
    text = text.replace(/(\d+)\s+(cm|mm|m|km|kg|g|mg|lb|oz)/g, (match, p1, p2) => {
      changesCount++;
      return `${p1}\xA0${p2}`;
    });
    text = text.replace(/([:,])\s*"([^"]*)"/g, (match, p1, p2) => {
      changesCount++;
      return `${p1} \u2018${p2}\u2019`;
    });
    text = text.replace(/"([^"]*)"/g, (match, p1) => {
      changesCount++;
      return `\u201C${p1}\u201D`;
    });
    text = text.replace(/“([^“”]*)”/g, (match, p1) => {
      const newText = p1.replace(/'([^']*)'/g, (subMatch, p2) => {
        changesCount++;
        return `\u2018${p2}\u2019`;
      });
      return `\u201C${newText}\u201D`;
    });
    text = text.replace(/>>/g, "\xBB").replace(/<</g, "\xAB");
    text = text.replace(/--/g, "\u2014").replace(/-/g, "\u2014");
    return { text, changesCount };
  }
  // Function for typography rules specific to Russian
  typographyRussian(text) {
    let changesCount = 0;
    text = text.replace(/([:,])\s*"([^"]*)"/g, (match, p1, p2) => {
      changesCount++;
      return `${p1} \xAB${p2}\xBB`;
    });
    text = text.replace(/«([^«»][^„“]*)»/g, (match, p1) => {
      changesCount++;
      return `\u201E${p1}\u201C`;
    });
    text = text.replace(/"([^"]*)"/g, (match, p1) => {
      changesCount++;
      return `\xAB${p1}\xBB`;
    });
    text = text.replace(/>>/g, "\xBB");
    text = text.replace(/<</g, "\xAB");
    changesCount++;
    const prepositionsRussian = /(в|и|к|с|у|о|на|по|за|от|для|до|со)(\s+)/gi;
    text = text.replace(prepositionsRussian, (match, p1, p2) => {
      changesCount++;
      return `${p1}\xA0`;
    });
    text = text.replace(/(\d+)\s+(см|мм|м|км|кг|г|мг|фунт|унц)/g, (match, p1, p2) => {
      changesCount++;
      return `${p1}\xA0${p2}`;
    });
    text = text.replace(/--/g, "\u2014");
    changesCount += (text.match(/--/g) || []).length;
    text = text.replace(/(?<!^|\d|[а-яА-ЯёЁ])-(?!\d|[а-яА-ЯёЁ])/gm, "\u2014");
    changesCount += (text.match(/(?<!^|\d|[а-яА-ЯёЁ])-(?!\d|[а-яА-ЯёЁ])/gm) || []).length;
    return { text, changesCount };
  }
  onunload() {
    console.log("Typograph plugin unloaded");
  }
};
//# sourceMappingURL=data:application/json;base64,
