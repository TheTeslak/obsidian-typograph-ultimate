/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => TypographPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var TypographPlugin = class extends import_obsidian.Plugin {
  async onload() {
    this.addCommand({
      id: "apply-typography",
      name: "Apply Typography to Current File",
      editorCallback: (editor) => this.applyTypography(editor)
    });
    this.addRibbonIcon("pencil", "Apply Typography", () => {
      const activeView = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
      if (activeView) {
        this.applyTypography(activeView.editor);
      }
    });
    console.log("Typograph plugin loaded");
  }
  applyTypography(editor) {
    const text = editor.getValue();
    const lines = text.split("\n");
    let changesCount = 0;
    let formattedText = lines.map((line) => {
      const lang = this.detectLanguage(line);
      if (lang === "en") {
        const result = this.typographyEnglish(line);
        changesCount += result.changesCount;
        return result.text;
      } else if (lang === "ru") {
        const result = this.typographyRussian(line);
        changesCount += result.changesCount;
        return result.text;
      }
      return line;
    }).join("\n");
    if (changesCount > 0) {
      editor.setValue(formattedText);
      new import_obsidian.Notice(`${changesCount} changes applied.`);
    } else {
      new import_obsidian.Notice("No changes were necessary.");
    }
  }
  // Detect the language of the text based on the presence of Cyrillic characters
  detectLanguage(text) {
    const cyrillic = /[а-яА-ЯЁё]/;
    return cyrillic.test(text) ? "ru" : "en";
  }
  // Function for typography rules specific to English
  typographyEnglish(text) {
    let changesCount = 0;
    const shortWordsEnglish = /\b(and|the|a|an|to|at|in|on|by|of|for|from|as|with|but)\s+/gi;
    text = text.replace(shortWordsEnglish, (match, p1) => {
      changesCount++;
      return `${p1}\xA0`;
    });
    text = text.replace(/(\d+)\s+(cm|mm|m|km|kg|g|mg|lb|oz)/g, (match, p1, p2) => {
      changesCount++;
      return `${p1}\xA0${p2}`;
    });
    text = text.replace(/([:,])\s*"([^"]*)"/g, (match, p1, p2) => {
      changesCount++;
      return `${p1} \u2018${p2}\u2019`;
    });
    text = text.replace(/"([^"]*)"/g, (match, p1) => {
      changesCount++;
      return `\u201C${p1}\u201D`;
    });
    text = text.replace(/“([^“”]*)”/g, (match, p1) => {
      const newText = p1.replace(/'([^']*)'/g, (subMatch, p2) => {
        changesCount++;
        return `\u2018${p2}\u2019`;
      });
      return `\u201C${newText}\u201D`;
    });
    text = text.replace(/>>/g, "\xBB").replace(/<</g, "\xAB");
    text = text.replace(/--/g, "\u2014").replace(/-/g, "\u2014");
    return { text, changesCount };
  }
  // Function for typography rules specific to Russian
  typographyRussian(text) {
    let changesCount = 0;
    text = text.replace(/([:,])\s*"([^"]*)"/g, (match, p1, p2) => {
      changesCount++;
      return `${p1} \xAB${p2}\xBB`;
    });
    text = text.replace(/"([^"]*)"/g, (match, p1) => {
      changesCount++;
      return `\xAB${p1}\xBB`;
    });
    text = text.replace(/«([^«»]*)»/g, (match, p1) => {
      changesCount++;
      return `\u201E${p1}\u201C`;
    });
    text = text.replace(/>>/g, "\xBB");
    text = text.replace(/<</g, "\xAB");
    changesCount++;
    const shortWordsRussian = /\b(в|и|к|с|у|о|на|по|за|от|для|до|со)\s+/gi;
    text = text.replace(shortWordsRussian, (match, p1) => {
      changesCount++;
      return `${p1}\xA0`;
    });
    text = text.replace(/(\d+)\s+(см|мм|м|км|кг|г|мг|фунт|унц)/g, (match, p1, p2) => {
      changesCount++;
      return `${p1}\xA0${p2}`;
    });
    text = text.replace(/--/g, "\u2014");
    text = text.replace(/(?<!>)\b-\b(?!<)/g, "\u2014");
    return { text, changesCount };
  }
  onunload() {
    console.log("Typograph plugin unloaded");
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHsgQXBwLCBFZGl0b3IsIE1hcmtkb3duVmlldywgTm90aWNlLCBQbHVnaW4gfSBmcm9tIFwib2JzaWRpYW5cIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFR5cG9ncmFwaFBsdWdpbiBleHRlbmRzIFBsdWdpbiB7XHJcbiAgYXN5bmMgb25sb2FkKCkge1xyXG4gICAgLy8gQWRkaW5nIGEgY29tbWFuZCB0byB0aGUgY29tbWFuZCBwYWxldHRlXHJcbiAgICB0aGlzLmFkZENvbW1hbmQoe1xyXG4gICAgICBpZDogXCJhcHBseS10eXBvZ3JhcGh5XCIsXHJcbiAgICAgIG5hbWU6IFwiQXBwbHkgVHlwb2dyYXBoeSB0byBDdXJyZW50IEZpbGVcIixcclxuICAgICAgZWRpdG9yQ2FsbGJhY2s6IChlZGl0b3I6IEVkaXRvcikgPT4gdGhpcy5hcHBseVR5cG9ncmFwaHkoZWRpdG9yKSxcclxuICAgIH0pO1xyXG5cclxuICAgIC8vIEFkZGluZyBhIGJ1dHRvbiB0byB0aGUgdG9vbGJhclxyXG4gICAgdGhpcy5hZGRSaWJib25JY29uKFwicGVuY2lsXCIsIFwiQXBwbHkgVHlwb2dyYXBoeVwiLCAoKSA9PiB7XHJcbiAgICAgIGNvbnN0IGFjdGl2ZVZpZXcgPSB0aGlzLmFwcC53b3Jrc3BhY2UuZ2V0QWN0aXZlVmlld09mVHlwZShNYXJrZG93blZpZXcpO1xyXG4gICAgICBpZiAoYWN0aXZlVmlldykge1xyXG4gICAgICAgIHRoaXMuYXBwbHlUeXBvZ3JhcGh5KGFjdGl2ZVZpZXcuZWRpdG9yKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgY29uc29sZS5sb2coXCJUeXBvZ3JhcGggcGx1Z2luIGxvYWRlZFwiKTtcclxuICB9XHJcblxyXG4gIGFwcGx5VHlwb2dyYXBoeShlZGl0b3I6IEVkaXRvcikge1xyXG4gICAgY29uc3QgdGV4dCA9IGVkaXRvci5nZXRWYWx1ZSgpO1xyXG4gICAgY29uc3QgbGluZXMgPSB0ZXh0LnNwbGl0KFwiXFxuXCIpO1xyXG5cclxuICAgIGxldCBjaGFuZ2VzQ291bnQgPSAwO1xyXG4gICAgbGV0IGZvcm1hdHRlZFRleHQgPSBsaW5lc1xyXG4gICAgICAubWFwKChsaW5lKSA9PiB7XHJcbiAgICAgICAgY29uc3QgbGFuZyA9IHRoaXMuZGV0ZWN0TGFuZ3VhZ2UobGluZSk7XHJcbiAgICAgICAgaWYgKGxhbmcgPT09IFwiZW5cIikge1xyXG4gICAgICAgICAgLy8gTm93IGNoZWNrcyBmb3IgRW5nbGlzaCBsYW5ndWFnZSBmaXJzdFxyXG4gICAgICAgICAgY29uc3QgcmVzdWx0ID0gdGhpcy50eXBvZ3JhcGh5RW5nbGlzaChsaW5lKTtcclxuICAgICAgICAgIGNoYW5nZXNDb3VudCArPSByZXN1bHQuY2hhbmdlc0NvdW50O1xyXG4gICAgICAgICAgcmV0dXJuIHJlc3VsdC50ZXh0O1xyXG4gICAgICAgIH0gZWxzZSBpZiAobGFuZyA9PT0gXCJydVwiKSB7XHJcbiAgICAgICAgICAvLyBUaGVuIGNoZWNrcyBmb3IgUnVzc2lhbiBsYW5ndWFnZVxyXG4gICAgICAgICAgY29uc3QgcmVzdWx0ID0gdGhpcy50eXBvZ3JhcGh5UnVzc2lhbihsaW5lKTtcclxuICAgICAgICAgIGNoYW5nZXNDb3VudCArPSByZXN1bHQuY2hhbmdlc0NvdW50O1xyXG4gICAgICAgICAgcmV0dXJuIHJlc3VsdC50ZXh0O1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbGluZTtcclxuICAgICAgfSlcclxuICAgICAgLmpvaW4oXCJcXG5cIik7XHJcblxyXG4gICAgaWYgKGNoYW5nZXNDb3VudCA+IDApIHtcclxuICAgICAgZWRpdG9yLnNldFZhbHVlKGZvcm1hdHRlZFRleHQpO1xyXG4gICAgICBuZXcgTm90aWNlKGAke2NoYW5nZXNDb3VudH0gY2hhbmdlcyBhcHBsaWVkLmApO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgbmV3IE5vdGljZShcIk5vIGNoYW5nZXMgd2VyZSBuZWNlc3NhcnkuXCIpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8gRGV0ZWN0IHRoZSBsYW5ndWFnZSBvZiB0aGUgdGV4dCBiYXNlZCBvbiB0aGUgcHJlc2VuY2Ugb2YgQ3lyaWxsaWMgY2hhcmFjdGVyc1xyXG4gIGRldGVjdExhbmd1YWdlKHRleHQ6IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgICBjb25zdCBjeXJpbGxpYyA9IC9bXHUwNDMwLVx1MDQ0Rlx1MDQxMC1cdTA0MkZcdTA0MDFcdTA0NTFdLztcclxuICAgIHJldHVybiBjeXJpbGxpYy50ZXN0KHRleHQpID8gXCJydVwiIDogXCJlblwiO1xyXG4gIH1cclxuXHJcbiAgLy8gRnVuY3Rpb24gZm9yIHR5cG9ncmFwaHkgcnVsZXMgc3BlY2lmaWMgdG8gRW5nbGlzaFxyXG4gIHR5cG9ncmFwaHlFbmdsaXNoKHRleHQ6IHN0cmluZyk6IHsgdGV4dDogc3RyaW5nOyBjaGFuZ2VzQ291bnQ6IG51bWJlciB9IHtcclxuICAgIGxldCBjaGFuZ2VzQ291bnQgPSAwO1xyXG5cclxuICAgIC8vIFJlcGxhY2Ugc3BhY2VzIGFmdGVyIHNob3J0IHdvcmRzIChwcmVwb3NpdGlvbnMsIGFydGljbGVzLCBjb25qdW5jdGlvbnMpIHdpdGggbm9uLWJyZWFraW5nIHNwYWNlc1xyXG4gICAgY29uc3Qgc2hvcnRXb3Jkc0VuZ2xpc2ggPSAvXFxiKGFuZHx0aGV8YXxhbnx0b3xhdHxpbnxvbnxieXxvZnxmb3J8ZnJvbXxhc3x3aXRofGJ1dClcXHMrL2dpO1xyXG4gICAgdGV4dCA9IHRleHQucmVwbGFjZShzaG9ydFdvcmRzRW5nbGlzaCwgKG1hdGNoLCBwMSkgPT4ge1xyXG4gICAgICBjaGFuZ2VzQ291bnQrKztcclxuICAgICAgcmV0dXJuIGAke3AxfVxcdTAwQTBgO1xyXG4gICAgfSk7XHJcblxyXG4gICAgLy8gUmVwbGFjZSBzcGFjZXMgYmV0d2VlbiBudW1iZXJzIGFuZCBtZXRyaWMgdW5pdHMgd2l0aCBub24tYnJlYWtpbmcgc3BhY2VzXHJcbiAgICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC8oXFxkKylcXHMrKGNtfG1tfG18a218a2d8Z3xtZ3xsYnxveikvZywgKG1hdGNoLCBwMSwgcDIpID0+IHtcclxuICAgICAgY2hhbmdlc0NvdW50Kys7XHJcbiAgICAgIHJldHVybiBgJHtwMX1cXHUwMEEwJHtwMn1gO1xyXG4gICAgfSk7XHJcblxyXG4gICAgLy8gUmVwbGFjZSBcIjogXCIgb3IgXCIsIFwiIGJlZm9yZSBkaXJlY3Qgc3BlZWNoIHdpdGggdGhlIGFwcHJvcHJpYXRlIHF1b3RhdGlvbiBtYXJrc1xyXG4gICAgdGV4dCA9IHRleHQucmVwbGFjZSgvKFs6LF0pXFxzKlwiKFteXCJdKilcIi9nLCAobWF0Y2gsIHAxLCBwMikgPT4ge1xyXG4gICAgICBjaGFuZ2VzQ291bnQrKztcclxuICAgICAgcmV0dXJuIGAke3AxfSBcdTIwMTgke3AyfVx1MjAxOWA7XHJcbiAgICB9KTtcclxuXHJcbiAgICAvLyBSZXBsYWNlIGFsbCBkb3VibGUgcXVvdGF0aW9uIG1hcmtzIHdpdGggXHUyMDFDLi4uXHUyMDFEXHJcbiAgICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC9cIihbXlwiXSopXCIvZywgKG1hdGNoLCBwMSkgPT4ge1xyXG4gICAgICBjaGFuZ2VzQ291bnQrKztcclxuICAgICAgcmV0dXJuIGBcdTIwMUMke3AxfVx1MjAxRGA7XHJcbiAgICB9KTtcclxuXHJcbiAgICAvLyBSZXBsYWNlIG5lc3RlZCBxdW90YXRpb24gbWFya3MgaW5zaWRlIFx1MjAxQy4uLlx1MjAxRCB3aXRoIFx1MjAxOC4uLlx1MjAxOVxyXG4gICAgdGV4dCA9IHRleHQucmVwbGFjZSgvXHUyMDFDKFteXHUyMDFDXHUyMDFEXSopXHUyMDFEL2csIChtYXRjaCwgcDEpID0+IHtcclxuICAgICAgY29uc3QgbmV3VGV4dCA9IHAxLnJlcGxhY2UoLycoW14nXSopJy9nLCAoc3ViTWF0Y2gsIHAyKSA9PiB7XHJcbiAgICAgICAgY2hhbmdlc0NvdW50Kys7XHJcbiAgICAgICAgcmV0dXJuIGBcdTIwMTgke3AyfVx1MjAxOWA7XHJcbiAgICAgIH0pO1xyXG4gICAgICByZXR1cm4gYFx1MjAxQyR7bmV3VGV4dH1cdTIwMURgO1xyXG4gICAgfSk7XHJcblxyXG4gICAgLy8gUmVwbGFjZSA+PiB3aXRoIFx1MDBCQiBhbmQgPDwgd2l0aCBcdTAwQUJcclxuICAgIHRleHQgPSB0ZXh0LnJlcGxhY2UoLz4+L2csICdcdTAwQkInKS5yZXBsYWNlKC88PC9nLCAnXHUwMEFCJyk7XHJcblxyXG4gICAgLy8gUmVwbGFjZSAtLSBhbmQgLSB3aXRoIFx1MjAxNFxyXG4gICAgdGV4dCA9IHRleHQucmVwbGFjZSgvLS0vZywgJ1x1MjAxNCcpLnJlcGxhY2UoLy0vZywgJ1x1MjAxNCcpO1xyXG5cclxuICAgIHJldHVybiB7IHRleHQsIGNoYW5nZXNDb3VudCB9O1xyXG4gIH1cclxuXHJcbi8vIEZ1bmN0aW9uIGZvciB0eXBvZ3JhcGh5IHJ1bGVzIHNwZWNpZmljIHRvIFJ1c3NpYW5cclxudHlwb2dyYXBoeVJ1c3NpYW4odGV4dDogc3RyaW5nKTogeyB0ZXh0OiBzdHJpbmc7IGNoYW5nZXNDb3VudDogbnVtYmVyIH0ge1xyXG4gIGxldCBjaGFuZ2VzQ291bnQgPSAwO1xyXG5cclxuICAvLyBSZXBsYWNlIFwiOiBcIiBvciBcIiwgXCIgYmVmb3JlIGRpcmVjdCBzcGVlY2ggd2l0aCB0aGUgYXBwcm9wcmlhdGUgcXVvdGF0aW9uIG1hcmtzXHJcbiAgdGV4dCA9IHRleHQucmVwbGFjZSgvKFs6LF0pXFxzKlwiKFteXCJdKilcIi9nLCAobWF0Y2gsIHAxLCBwMikgPT4ge1xyXG4gICAgY2hhbmdlc0NvdW50Kys7XHJcbiAgICByZXR1cm4gYCR7cDF9IFx1MDBBQiR7cDJ9XHUwMEJCYDtcclxuICB9KTtcclxuXHJcbiAgLy8gUmVwbGFjZSBhbGwgZG91YmxlIHF1b3RhdGlvbiBtYXJrcyB3aXRoIFx1MDBBQi4uLlx1MDBCQlxyXG4gIHRleHQgPSB0ZXh0LnJlcGxhY2UoL1wiKFteXCJdKilcIi9nLCAobWF0Y2gsIHAxKSA9PiB7XHJcbiAgICBjaGFuZ2VzQ291bnQrKztcclxuICAgIHJldHVybiBgXHUwMEFCJHtwMX1cdTAwQkJgO1xyXG4gIH0pO1xyXG4gIFxyXG4gICAgLy8gUmVwbGFjZSBuZXN0ZWQgcXVvdGF0aW9uIG1hcmtzIGluc2lkZSBcdTAwQUIuLi5cdTAwQkIgd2l0aCBcdTIwMUUuLi5cdTIwMUNcclxuICAgIHRleHQgPSB0ZXh0LnJlcGxhY2UoL1x1MDBBQihbXlx1MDBBQlx1MDBCQl0qKVx1MDBCQi9nLCAobWF0Y2gsIHAxKSA9PiB7XHJcbiAgICAgIGNoYW5nZXNDb3VudCsrO1xyXG4gICAgICByZXR1cm4gYFx1MjAxRSR7cDF9XHUyMDFDYDtcclxuICAgIH0pO1xyXG5cclxuICAvLyBSZXBsYWNlID4+IHdpdGggXHUwMEJCIGFuZCA8PCB3aXRoIFx1MDBBQlxyXG4gIHRleHQgPSB0ZXh0LnJlcGxhY2UoLz4+L2csICdcdTAwQkInKTtcclxuICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC88PC9nLCAnXHUwMEFCJyk7XHJcbiAgY2hhbmdlc0NvdW50Kys7XHJcblxyXG4gIC8vIFJlcGxhY2Ugc3BhY2VzIGFmdGVyIHNob3J0IHdvcmRzIChwcmVwb3NpdGlvbnMpIHdpdGggbm9uLWJyZWFraW5nIHNwYWNlc1xyXG4gIGNvbnN0IHNob3J0V29yZHNSdXNzaWFuID0gL1xcYihcdTA0MzJ8XHUwNDM4fFx1MDQzQXxcdTA0NDF8XHUwNDQzfFx1MDQzRXxcdTA0M0RcdTA0MzB8XHUwNDNGXHUwNDNFfFx1MDQzN1x1MDQzMHxcdTA0M0VcdTA0NDJ8XHUwNDM0XHUwNDNCXHUwNDRGfFx1MDQzNFx1MDQzRXxcdTA0NDFcdTA0M0UpXFxzKy9naTtcclxuICB0ZXh0ID0gdGV4dC5yZXBsYWNlKHNob3J0V29yZHNSdXNzaWFuLCAobWF0Y2gsIHAxKSA9PiB7XHJcbiAgICBjaGFuZ2VzQ291bnQrKztcclxuICAgIHJldHVybiBgJHtwMX1cXHUwMEEwYDtcclxuICB9KTtcclxuXHJcbiAgLy8gUmVwbGFjZSBzcGFjZXMgYmV0d2VlbiBudW1iZXJzIGFuZCBtZXRyaWMgdW5pdHMgd2l0aCBub24tYnJlYWtpbmcgc3BhY2VzXHJcbiAgdGV4dCA9IHRleHQucmVwbGFjZSgvKFxcZCspXFxzKyhcdTA0NDFcdTA0M0N8XHUwNDNDXHUwNDNDfFx1MDQzQ3xcdTA0M0FcdTA0M0N8XHUwNDNBXHUwNDMzfFx1MDQzM3xcdTA0M0NcdTA0MzN8XHUwNDQ0XHUwNDQzXHUwNDNEXHUwNDQyfFx1MDQ0M1x1MDQzRFx1MDQ0NikvZywgKG1hdGNoLCBwMSwgcDIpID0+IHtcclxuICAgIGNoYW5nZXNDb3VudCsrO1xyXG4gICAgcmV0dXJuIGAke3AxfVxcdTAwQTAke3AyfWA7XHJcbiAgfSk7XHJcblxyXG4gIC8vIFJlcGxhY2UgLS0gYW5kIHN0YW5kYWxvbmUgLSB3aXRoIFx1MjAxNFxyXG4gIHRleHQgPSB0ZXh0LnJlcGxhY2UoLy0tL2csICdcdTIwMTQnKTsgLy8gUmVwbGFjZSBkb3VibGUgZGFzaCB3aXRoIGxvbmcgZGFzaFxyXG4gIHRleHQgPSB0ZXh0LnJlcGxhY2UoLyg/PCE+KVxcYi1cXGIoPyE8KS9nLCAnXHUyMDE0Jyk7IC8vIFJlcGxhY2Ugc2luZ2xlIGRhc2ggd2l0aCBsb25nIGRhc2gsIGJ1dCBhdm9pZCByZXBsYWNpbmcgd2l0aGluIGFuZ2xlIGJyYWNrZXRzXHJcbiAgXHJcbiAgcmV0dXJuIHsgdGV4dCwgY2hhbmdlc0NvdW50IH07XHJcbn1cclxuXHJcbiAgb251bmxvYWQoKSB7XHJcbiAgICBjb25zb2xlLmxvZyhcIlR5cG9ncmFwaCBwbHVnaW4gdW5sb2FkZWRcIik7XHJcbiAgfVxyXG59Il0sCiAgIm1hcHBpbmdzIjogIjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLHNCQUEwRDtBQUUxRCxJQUFxQixrQkFBckIsY0FBNkMsdUJBQU87QUFBQSxFQUNsRCxNQUFNLFNBQVM7QUFFYixTQUFLLFdBQVc7QUFBQSxNQUNkLElBQUk7QUFBQSxNQUNKLE1BQU07QUFBQSxNQUNO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
